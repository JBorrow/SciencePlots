Contributing
============
Please feel free to contribute to the SciencePlots repo!
For example, it would be good to add new styles for different journals
and add new color cycles. Before starting a new style or making any changes,
please create an issue through the
`GitHub issue tracker <|repo_base_link + "issues"|>`_.
That way we can discuss if the changes are necessary and the best approach.

Whether you want to add a new style, update any of them, upgrade docs or
improve code or examples, you will be welcome!

SciencePlots' development environment
-------------------------------------
Let's have a close look to relevant dependencies of this project:
 * `sphinx <https://www.sphinx-doc.org/en/master/>`_ is used to build the
   docs pages.
 * `sphinx-gallery <https://sphinx-gallery.github.io/stable/index.html>`_
   helps generate the nice
   :ref:`autogenerated_examples/index:Style Gallery`.
 * `Jinja2 <https://palletsprojects.com/p/jinja/>`_ is a templating engine
   that helps creating the examples that are fed to `sphinx-gallery`.
 * `ReadTheDocs <https://github.com/readthedocs/readthedocs.org>`_ is the
   hosting solution we rely on.
 * `flake8 <https://flake8.pycqa.org/en/latest/>`_ is a code linter for
   Python, following PEP8 rules. You should set it up in your favourite IDE.
 * `pytest <https://pytest.org/>`_ for testing code (well, we have to include
   tests before).

Setting up the repo to start working on it
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
First, clone the project and create a virtual environment inside its folder.

.. code-block:: bash

    git clone https://github.com/garrettj403/SciencePlots.git
    cd SciencePlots
    py -m venv venv

Now you should activate the environment. Depends on your OS:
 * Linux: :code:`venv/bin/activate`
 * Windows: :code:`venv/Scripts/activate`

Install all of SciencePlots dependencies with
:code:`py -m pip install -e .[all]`.
This step will install aforementioned packages.

Remember, if you want to play with LaTeX formatting and other
fonts, you should see :ref:`guides/faq:Installing Latex`.

Code Style and other programming practices
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Your code may be read by many people, so it's good practice to
keep an eye on it's quality! We don't want to discourage you from trying,
so as a rule of thumb, make use of linters.
`flake8` is recommended, as it will follow :pep:`8`,
which has some good standard coding practices.

Nevertheless, this does not ensure the most readable code ever.
So it's both the contributor and the reviewer task to ensure it is.
Don't be afraid of doing mistakes, we all have been there.

Follow common practices like avoiding magic numbers or magic paths
and write explanatory comments that help understanding the
underlying workflow.

Documentation: writing and building
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Sphinx uses `reStructuredTe <https://docutils.sourceforge.io/rst.html>`_
with directives and roles on top of that. Basic rST is available at
the previous link, and you can find more about these added items
`at Sphinx <https://www.sphinx-doc.org/en/master/usage/index.html>`_.

After doing some changes, please check if docs render correctly.

To build the docs, execute from root directory (`SciencePlots/`):

.. code-block:: bash

    py examples/__examples_generator.py
    docs/make html

Sphinx will let you know where the docs are at. Open them in a browser
and check result is fine.

You can ignore the first command if no changes were made to styles
(includes adding new ones) or to the example generator algorithm.
In other words, there is no need to run it for minor changes that
exclusively affect static documentation.

The Contributing TODO list
--------------------------
Here are some possible contributions that could be a good start!

 * Upgrade docs in any way is always welcome!
 * Add useful styles, for journals or color cycles.
 * Report new issues.
